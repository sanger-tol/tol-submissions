openapi: 3.0.0
info:
  title: Tree of Life Submissions API
  description: API for ToL Submissions
  contact:
    email: tol-platforms@sanger.ac.uk
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.1
servers:
  - url: http://0.0.0.0:8081/api/v1
tags:
- name: users
  description: Unauthenticated Usage
- name: submitters
  description: Submitting
- name: auth
  description: Authorisation
paths:
  /manifests:
    get:
      security:
        - ApiKeyAuth: []
      tags:
      - submitters
      summary: List all manifests
      description: |
        All manifests
      operationId: get_manifests
      responses:
        "200":
          description: manifests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ManifestOutShort'
                x-content-type: application/json
        "403":
          description: user not authorised to use this function
      x-openapi-router-controller: main.controllers.submitters_controller
    post:
      security:
        - ApiKeyAuth: []
      tags:
      - submitters
      summary: Upload a JSON manifest
      description: |
        Upload a manifest in JSON format
      operationId: upload_manifest_json
      requestBody:
        description: Manifest to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Manifest'
      responses:
        "200":
          description: manifest created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Manifest'
                x-content-type: application/json
        "400":
          description: invalid input, object invalid, or item already exists
        "403":
          description: user not authorised to use this function
      x-openapi-router-controller: main.controllers.submitters_controller
  /manifests/upload-excel:
    post:
      security:
        - ApiKeyAuth: []
      tags:
      - submitters
      summary: Upload an excel manifest
      description: |
        Uploads an Excel manifest to this service
      operationId: upload_manifest_excel
      parameters:
        - name: projectName
          in: query
          description: the name of the project
          required: false
          style: form
          explode: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              x-body-name: excelFile
              type: object
              properties:
                excelFile:
                  type: string
                  format: binary
              required:
                - excelFile
      responses:
        "200":
          description: manifest created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Manifest'
                x-content-type: application/json
        "400":
          description: invalid input, object invalid, or item already exists
        "403":
          description: user not authorised to use this function
      x-openapi-router-controller: main.controllers.submitters_controller
  /manifests/validate:
    post:
      security:
        - ApiKeyAuth: []
      tags:
      - submitters
      summary: Upload and immediately validate a JSON manifest
      description: |
        Upload a manifest in JSON format and validate it (convenience method)
      operationId: submit_and_validate_manifest_json
      requestBody:
        description: Manifest to upload and validate
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Manifest'
      responses:
        "200":
          description: manifest validated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestValidationResult'
                x-content-type: application/json
        "400":
          description: invalid input, object invalid, or item already exists
        "403":
          description: user not authorised to use this function
      x-openapi-router-controller: main.controllers.submitters_controller
  /manifests/{manifestId}:
    get:
      security:
        - ApiKeyAuth: []
      tags:
      - submitters
      summary: Gets a manifest
      description: |
        Returns a manifest that has been uploaded (and possibly validated and had IDs generated)
      operationId: get_manifest
      parameters:
      - name: manifestId
        in: path
        description: a manifest ID (given when manifest created)
        required: true
        style: simple
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: the manifest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Manifest'
                x-content-type: application/json
        "400":
          description: bad input parameter
        "403":
          description: user not authorised to use this function
        "404":
          description: manifest does not exist
      x-openapi-router-controller: main.controllers.submitters_controller
  /manifests/{manifestId}/validate:
    get:
      security:
        - ApiKeyAuth: []
      tags:
      - submitters
      summary: Validates a manifest
      description: |
        Validates against: ENA checklist, ToLID species, family, genus, order
      operationId: validate_manifest
      parameters:
      - name: manifestId
        in: path
        description: a manifest ID (given when manifest created)
        required: true
        style: simple
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: validation results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestValidationResult'
                x-content-type: application/json
        "400":
          description: bad input parameter
        "403":
          description: user not authorised to use this function
        "404":
          description: manifest does not exist
      x-openapi-router-controller: main.controllers.submitters_controller
  /manifests/{manifestId}/generate:
    patch:
      security:
        - ApiKeyAuth: []
      tags:
      - submitters
      summary: Generates ToLIDs and BioSamples accessions for a manifest
      description: |
        Calls out to ToLID service and ENA service
      operationId: generate_ids_for_manifest
      parameters:
      - name: manifestId
        in: path
        description: a manifest ID (given when manifest created)
        required: true
        style: simple
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: manifest with IDs filled in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Manifest'
                x-content-type: application/json
        "400":
          description: errors in generating IDs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestValidationResult'
                x-content-type: application/json
        "403":
          description: user not authorised to use this function
        "404":
          description: manifest does not exist
      x-openapi-router-controller: main.controllers.submitters_controller
  /manifests/{manifestId}/download-excel:
    get:
      security:
        - ApiKeyAuth: []
      tags:
      - submitters
      summary: Downloads an excel file for the manifest, with ID columns filled in
      description: |
        Will use original manifest excel file, if manifest was uploaded from Excel
      operationId: download_manifest_excel
      parameters:
      - name: manifestId
        in: path
        description: a manifest ID (given when manifest created)
        required: true
        style: simple
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: An Excel file, with the IDs filled in (if generate endpoint has been called previously)
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        "403":
          description: user not authorised to use this function
        "404":
          description: manifest does not exist
      x-openapi-router-controller: main.controllers.submitters_controller
  /manifests/generate:
    post:
      security:
        - ApiKeyAuth: []
      tags:
      - submitters
      summary: Upload a JSON manifest and immediately generate IDs for its samples
      description: |
        Upload a manifest in JSON format and validate it (convenience method)
      operationId: submit_and_generate_manifest_json
      requestBody:
        description: Manifest to upload and validate
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Manifest'
      responses:
        "200":
          description: manifest with IDs filled in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Manifest'
                x-content-type: application/json
        "400":
          description: errors in generating IDs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestValidationResult'
                x-content-type: application/json
        "403":
          description: user not authorised to use this function
      x-openapi-router-controller: main.controllers.submitters_controller
  /specimens/specimenId/{specimenId}/samples:
    get:
      tags:
      - users
      summary: Get the samples of a specimen
      description: |
        Get all samples matching the specimen of specified ID
      operationId: get_samples_by_specimen_id
      parameters:
      - name: specimenId
        in: path
        description: a specimen ID
        required: true
        style: simple
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Details of the samples
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specimen'
                x-content-type: application/json
        "404":
          description: specimen not found
      x-openapi-router-controller: main.controllers.users_controller
  /specimens/biospecimenId/{biospecimenId}/samples:
    get:
      tags:
      - users
      summary: Get the samples of a specimen
      description: |
        Get all samples matching the specimen with specified biospecimen ID
      operationId: get_samples_by_biospecimen_id
      parameters:
      - name: biospecimenId
        in: path
        description: a biospecimen ID
        required: true
        style: simple
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Details of the samples
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specimen'
                x-content-type: application/json
        "404":
          description: specimen not found
      x-openapi-router-controller: main.controllers.users_controller
  /samples/{biosampleId}:
    get:
      tags:
      - users
      summary: Get a sample
      description: |
        Get the sample matching the specified biosample ID
      operationId: get_sample
      parameters:
      - name: biosampleId
        in: path
        description: a biosample ID
        required: true
        style: simple
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: The fetched sample
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sample'
                x-content-type: application/json
        "404":
          description: sample not found
      x-openapi-router-controller: main.controllers.users_controller
  /environment:
    get:
      tags:
      - users
      summary: Gets the nature of the environment (e.g. production/dev)
      description: |
        Gets the nature of the environment (e.g. production/dev)
      operationId: get_environment
      responses:
        "200":
          description: The environment type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
                x-content-type: application/json
        "500":
          description: Internal environment error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentError'
                x-content-type: application/json
      x-openapi-router-controller: main.controllers.users_controller
  /auth/login:
    get:
      tags:
      - auth
      summary: Get the Elixir login URL
      description: |
        Get the URL for logging in to Elixir
      operationId: login
      responses:
        "200":
          description: details of Elixir login URL
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    loginUrl:
                      type: string
        "400":
          description: bad input parameter
      x-openapi-router-controller: main.controllers.auth_controller
  /auth/token:
    post:
      tags:
      - auth
      summary: Get an Elixir authorisation token
      description: |
        Get the URL for logging in to Elixir
      operationId: get_token_from_callback
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                state:
                  type: string
      responses:
        "200":
          description: authorisation token from Elixir
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    token:
                      type: string
        "400":
          description: bad input parameter
      x-openapi-router-controller: main.controllers.auth_controller
  /auth/profile:
    post:
      tags:
      - auth
      summary: Get a user profile
      description: |
        Get the URL for logging in to Elixir
      operationId: create_user_profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        "200":
          description: user
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/User'
        "400":
          description: bad input parameter
      x-openapi-router-controller: main.controllers.auth_controller
components:
  schemas:
    Manifest:
      type: object
      required:
        - samples
      additionalProperties: false
      properties:
        projectName:
          type: string
          example: SuperProject
        stsManifestId:
          type: string
          example: 1234-5678-90
        samples:
          type: array
          items:
            $ref: '#/components/schemas/Sample'
        manifestId:
          type: string
          example: manifest12345
          readOnly: true
        submissionStatus:
          type: boolean
          example: true
          readOnly: true
    ManifestOutShort:
      required:
        - manifestId
        - projectName
        - submissionStatus
        - numberOfSamples
        - user
      properties:
        manifestId:
          type: string
          example: manifest12345
        stsManifestId:
          type: string
          example: 123-456-789
        projectName:
          type: string
          example: ToL
        submissionStatus:
          type: boolean
          example: true
        numberOfSamples:
          type: integer
          example: 96
        user:
          $ref: '#/components/schemas/User'
    Sample:
      type: object
      additionalProperties:
        type: string
      required:
        - row
        - SPECIMEN_ID
        - TAXON_ID
        - SCIENTIFIC_NAME
        - GENUS
        - FAMILY
        - ORDER_OR_GROUP
        - LIFESTAGE
        - SEX
        - ORGANISM_PART
        - GAL
        - GAL_SAMPLE_ID
        - COLLECTED_BY
        - COLLECTOR_AFFILIATION
        - DATE_OF_COLLECTION
        - COLLECTION_LOCATION
        - DECIMAL_LATITUDE
        - DECIMAL_LONGITUDE
        - HABITAT
        - IDENTIFIED_BY
        - IDENTIFIER_AFFILIATION
        - VOUCHER_ID
        - tolId
        - biosampleAccession
        - sraAccession
        - submissionAccession
        - sampleDerivedFrom
        - sampleSameAs
        - sampleSymbiontOf
      properties:
        row:
          type: integer
          example: 1
        SPECIMEN_ID:
          type: string
          example: SAN0000100
        TAXON_ID:
          type: integer
          example: 6344
        SCIENTIFIC_NAME:
          type: string
          example: Arenicola marina
        GENUS:
          type: string
          example: Arenicola
        FAMILY:
          type: string
          example: Arenicolidae
        ORDER_OR_GROUP:
          type: string
          example: None
        COMMON_NAME:
          type: string
          nullable: true
          example: lugworm
        LIFESTAGE:
          type: string
          example: ADULT
        SEX:
          type: string
          example: FEMALE
        ORGANISM_PART:
          type: string
          example: MUSCLE
        GAL:
          type: string
          example: SANGER INSTITUTE
        GAL_SAMPLE_ID:
          type: string
          example: SAN000100
        COLLECTED_BY:
          type: string
          example: ALEX COLLECTOR
        COLLECTOR_AFFILIATION:
          type: string
          example: THE COLLECTOR INSTITUTE
        DATE_OF_COLLECTION:
          type: string
          example: 2020-09-01
        COLLECTION_LOCATION:
          type: string
          example: UNITED KINGDOM | DARK FOREST
        DECIMAL_LATITUDE:
          type: string
          example: "+50.12345678"
        DECIMAL_LONGITUDE:
          type: string
          example: "-1.98765432"
        HABITAT:
          type: string
          example: Woodland
        IDENTIFIED_BY:
          type: string
          example: JO IDENTIFIER
        IDENTIFIER_AFFILIATION:
          type: string
          example: THE IDENTIFIER INSTITUTE
        VOUCHER_ID:
          type: string
          example: voucher1
        OTHER_INFORMATION:
          type: string
          nullable: true
          example: Special instructions
        ELEVATION:
          type: string
          nullable: true
          example: "1500"
        DEPTH:
          type: string
          nullable: true
          example: "100"
        RELATIONSHIP:
          type: string
          nullable: true
          example: host
        SYMBIONT:
          type: string
          nullable: true
          example: TARGET
        CULTURE_OR_STRAIN_ID:
          type: string
          nullable: true
          example: ABC1234
        SERIES:
          type: string
          nullable: true
          example: "1"
        RACK_OR_PLATE_ID:
          type: string
          nullable: true
          example: RACK1234
        TUBE_OR_WELL_ID:
          type: string
          nullable: true
          example: Tube_6
        TAXON_REMARKS:
          type: string
          nullable: true
          example: ABC1234
        INFRASPECIFIC_EPITHET:
          type: string
          nullable: true
          example: ABC1234
        COLLECTOR_SAMPLE_ID:
          type: string
          nullable: true
          example: MySample678
        GRID_REFERENCE:
          type: string
          nullable: true
          example: TL 1234 5678
        TIME_OF_COLLECTION:
          type: string
          nullable: true
          example: "16:00"
        DESCRIPTION_OF_COLLECTION_METHOD:
          type: string
          nullable: true
          example: Picked from a tree
        DIFFICULT_OR_HIGH_PRIORITY_SAMPLE:
          type: string
          nullable: true
          example: HIGH_PRIORITY
        IDENTIFIED_HOW:
          type: string
          nullable: true
          example: Looking
        SPECIMEN_ID_RISK:
          type: string
          nullable: true
          example: Y
        PRESERVED_BY:
          type: string
          nullable: true
          example: A PICKLER
        PRESERVER_AFFILIATION:
          type: string
          nullable: true
          example: THE SAMPLE PRESERVATION SOCIETY
        PRESERVATION_APPROACH:
          type: string
          nullable: true
          example: snap frozen
        PRESERVATIVE_SOLUTION:
          type: string
          nullable: true
          example: Water
        TIME_ELAPSED_FROM_COLLECTION_TO_PRESERVATION:
          type: string
          nullable: true
          example: "60"
        DATE_OF_PRESERVATION:
          type: string
          nullable: true
          example: "2020-01-01"
        SIZE_OF_TISSUE_IN_TUBE:
          type: string
          nullable: true
          example: VS
        TISSUE_REMOVED_FOR_BARCODING:
          type: string
          nullable: true
          example: Y
        PLATE_ID_FOR_BARCODING:
          type: string
          nullable: true
          example: Plate_3456
        TUBE_OR_WELL_ID_FOR_BARCODING:
          type: string
          nullable: true
          example: Well_4567
        TISSUE_FOR_BARCODING:
          type: string
          nullable: true
          example: LEG
        BARCODE_PLATE_PRESERVATIVE:
          type: string
          nullable: true
          example: Ethanol
        PURPOSE_OF_SPECIMEN:
          type: string
          nullable: true
          example: REFERENCE_GENOME
        HAZARD_GROUP:
          type: string
          nullable: true
          example: HG1
        REGULATORY_COMPLIANCE:
          type: string
          nullable: true
          example: Y
        ORIGINAL_COLLECTION_DATE:
          type: string
          nullable: true
          example: "2020-01-01"
        ORIGINAL_GEOGRAPHIC_LOCATION:
          type: string
          nullable: true
          example: UNITED KINGDOM | LIGHT FOREST
        BARCODE_HUB:
          type: string
          nullable: true
          example: SANGER INSTITUTE
        tolId:
          type: string
          example: wuAreMari1
          readOnly: true
        biosampleAccession:
          type: string
          example: SAMEA12345678
          readOnly: true
        sraAccession:
          type: string
          example: ERS6206028
          readOnly: true
        submissionAccession:
          type: string
          example: ERA3819349
          readOnly: true
        submissionError:
          type: string
          example: "The object being added already exists in the submission account with accession: \"ERS6206044\"."
          readOnly: true
        sampleDerivedFrom:
          type: string
          example: "SAMEA87654321"
          readOnly: true
        sampleSameAs:
          type: string
          example: "SAMEA87654321"
          readOnly: true
        sampleSymbiontOf:
          type: string
          example: "SAMEA87654321"
          readOnly: true
    User:
      required:
        - name
        - email
        - organisation
        - roles
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          example: "A User"
        email:
          type: string
          example: "user@example.com"
        organisation:
          type: string
          example: "Research Inc"
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
    Role:
      required:
        - role
      type: object
      additionalProperties: false
      properties:
        role:
          type: string
          example: submitter
      example:
        role: submitter
    ManifestValidationResult:
      required:
        - manifestId
        - number_of_errors
        - validations
      type: object
      additionalProperties: false
      properties:
        manifestId:
          type: integer
          example: 1234
        number_of_errors:
          type: integer
          example: 1
        validations:
          type: array
          items:
            $ref: '#/components/schemas/SampleValidationResult'
    SampleValidationResult:
      required:
        - row
        - results
      type: object
      additionalProperties: false
      properties:
        row:
          type: integer
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/SampleFieldValidationResult'
    SampleFieldValidationResult:
      required:
        - field
        - message
        - severity
      type: object
      additionalProperties: false
      properties:
        field:
          type: string
          example: "SPECIMEN_ID"
        message:
          type: string
          example: "Fails regex check"
        severity:
          type: string
          enum: [ERROR,WARNING]
          example: "ERROR"
    Specimen:
      required:
        - specimenId
        - biospecimenId
        - samples
      type: object
      additionalProperties: false
      properties:
        specimenId:
          type: string
          example: "SPECIMEN_ID"
        biospecimenId:
          type: string
          example: "BIOSPECIMEN_ID"
        samples:
          type: array
          items:
            $ref: '#/components/schemas/Sample'
    Environment:
      required:
        - environment
      type: object
      additionalProperties: false
      properties:
        environment:
          type: string
          enum: [dev, test, staging, production]
          example: dev
    EnvironmentError:
      required:
        - detail
      type: object
      additionalProperties: false
      properties:
        detail:
          type: string
          example: "Missing environment information"
  securitySchemes:
    ApiKeyAuth:        # name for the security scheme
      type: apiKey
      in: header       # can be "header", "query" or "cookie"
      name: api-key    # name of the header, query parameter or cookie
      x-apikeyInfoFunc: main.controllers.auth_controller.apikey_auth
# security:
#   - ApiKeyAuth: []     # 2) Apply the API key globally to all operations
  